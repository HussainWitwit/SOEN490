import React, { useEffect, useState } from 'react';
import RecommendationEngineTable from '../../components/RecommendationEngineTable/RecommendationEngineTable';
import { GetRecommendationResultList } from '../../api/endpoints/ResultsEndpoints';
import { mapDispatchToProps } from '../../redux/RightPanelReducer/reducer-actions';
import { mapStateToProps as mapAssetFilterStateToProps } from '../../redux/AssetFilterReducer/reducer-actions';
import PageSubHeader from '../../components/PageSubHeader/PageSubHeader';
import { connect } from 'react-redux';
import { TableColumns as columns } from './TableConfig';
import './ResultsPage.css'

export function ResultsPage(props) {
    const { openResultDrilldown, openScheduleDrilldown } = props;

    const [resultList, setResultList] = useState([]);
    const [defaultResultList, setDefaultResultList] = useState([]);
    const [isLoading, setisLoading] = useState(true);

    //Code duplication, however: this cannot be inside the TableConfig.jsx as the reducer action is passed at compile time and we want the function to be passed at runtime.
    const RecommendationLinkColumn = [{
        field: 'configuredRecommendationTitle', headerName: 'Recommendation', type: 'string', width: 200, cellClassName: 'table-style', renderCell: (params) => (
            <a className='configured-recommendation' onClick={() => openScheduleDrilldown(params.getValue('configuredRecommendationId'))}>
                {params.getValue('configuredRecommendationTitle')}
            </a>)
    }];

    const getResultList = async () => {
        let response = await GetRecommendationResultList(props.selectedAsset);
        //Necessary for datagrid date columns A.J.U.U
        let responseWtihDateObjects = response.map((element) => { 
            return {
                ...element,
                resultOutputDate: new Date(element.resultOutputDate)
        }});
        setDefaultResultList(responseWtihDateObjects);
        setResultList(responseWtihDateObjects);
    }


    const updateSearch = (input) => {
        setResultList(filterTableItems(TableItemType.Results, defaultResultList, input));
    }

    useEffect(() => {
        const getResultList = async () => {
            let response = await GetRecommendationResultList(props.selectedAsset);
            setDefaultResultList(response);
            setResultList(response);
            setisLoading(false);
        }
        getResultList();
    }, [props.selectedAsset])

    return (
        <div id="main-container">
            <div></div>
            <div>
            <br></br>
            <PageSubHeader
            pageTitle="Results"
            descriptionSubtitle="See the results generated by recommendation jobs"
            showCreateRecommendation={false}
            updateSearch={updateSearch}
            />
            </div>
            <br></br>
            <RecommendationEngineTable
                data={resultList}
                columnValues={[...columns, ...RecommendationLinkColumn]}
                isClickable={true}
                onClickRow={openResultDrilldown}
<<<<<<< HEAD
                dateColumnName={'resultOutputDate'}
                dateSortingOrder={'desc'}
                // customFilters = {}
=======
                loading = {isLoading}
>>>>>>> development
            />
        </div>
    );
}

export default connect(mapAssetFilterStateToProps, mapDispatchToProps)(ResultsPage);