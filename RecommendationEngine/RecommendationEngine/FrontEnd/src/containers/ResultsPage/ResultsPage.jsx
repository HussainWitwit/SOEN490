import React, { useEffect, useState } from 'react';
import { Grid } from '@material-ui/core';
import RecommendationEngineTable from '../../components/RecommendationEngineTable/RecommendationEngineTable';
import SearchBar from '../../common/SearchBar';
import { GetRecommendationResultList } from '../../api/endpoints/ResultsEndpoints';
import { mapDispatchToProps } from '../../redux/RightPanelReducer/reducer-actions';
import { connect } from 'react-redux';
import './ResultsPage.css'

export function ResultsPage (props) {
    const { openResultDrilldown } = props;

    const [resultList, setResultList] = useState([]);
    const [defaultResultList, setDefaultResultList] = useState([]);

    const currencyFormatter = new Intl.NumberFormat('en-CA', {
        style: 'currency',
        currency: 'CAD',
      });
      
      const CADPrice = {
        type: 'number',
        width: 200,
        valueFormatter: ({ value }) => currencyFormatter.format(Number(value)),
      };  

      const columns = [
        {field: 'id', headerName: 'Result ID', width: 150, type: 'number', cellClassName: 'table-style'},
        {field: 'netSaving', headerName: 'Net Saving', type: 'number',...CADPrice, flex: 0.25, cellClassName: 'table-positive-numbers'},
        {field: 'returnOnInvestment', headerName: 'Return On Investment', type: 'number', flex: 0.25, cellClassName: 'table-positive-numbers'},
        {field: 'costOfAction', headerName: 'Cost of Action', type: 'number',...CADPrice, flex: 0.25, cellClassName: 'table-negative-numbers'},
        {field: 'costOfInaction', headerName: 'Cost of Inaction', type: 'number', ...CADPrice, flex: 0.25, cellClassName: 'table-negative-numbers'}
    ]

    const dataGridSize = { height: 400, width: '100%' };

    /* istanbul ignore next */
    const getResultList = async () => {
        let response = await GetRecommendationResultList();
        setDefaultResultList(response);
        setResultList(response);
    }

    /* istanbul ignore next */
    const updateSearch = async (input) => {
        const filtered = defaultResultList.filter(result => {
            return result.id.toString().includes(input.toString())
        })
        setResultList(filtered);
    }

    useEffect(() => {
        getResultList();
    }, [])

    return (
        <div id="main-container">
            <div></div>
            <div>
                <br></br>
                <Grid id="grid-container1" container spacing={1} className="gridContainerStyle">
                    <Grid id="grid1" item>
                        <h3 id="title">Results</h3>
                        <h6 id="subtitle">See the results generated by recommendation jobs</h6>
                    </Grid>
                </Grid>
                <br></br>
            </div>
            <div>
                <div>
                    <Grid id="grid-container2" container spacing={1} className="gridContainerStyle">
                        <Grid item id="data-testid" >
                            <SearchBar
                                placeholder="Search for a recommendation..."
                                onSearchUpdate={updateSearch}
                            />
                        </Grid>
                    </Grid>
                </div>
            </div>
            <br></br>
            <RecommendationEngineTable
                data = {resultList}
                columnValues = {columns}
                dataGridSize = {dataGridSize}
                onClickRow = {openResultDrilldown}
            />
        </div>
    );
}

export default connect(null, mapDispatchToProps)(ResultsPage);