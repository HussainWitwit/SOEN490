import React, { useEffect, useState } from 'react';
import RecommendationEngineTable from '../../components/RecommendationEngineTable/RecommendationEngineTable';
import { GetRecommendationResultList } from '../../api/endpoints/ResultsEndpoints';
import { mapDispatchToProps } from '../../redux/RightPanelReducer/reducer-actions';
import { mapStateToProps as mapAssetFilterStateToProps } from '../../redux/AssetFilterReducer/reducer-actions';
import PageSubHeader from '../../components/PageSubHeader/PageSubHeader';
import { connect } from 'react-redux';
import { TableItemType,  filterTableItems } from '../../utilities/ArrayManipulationUtilities';
import './ResultsPage.css'

export function ResultsPage(props) {
    const { openResultDrilldown, openScheduleDrilldown } = props;

    const [resultList, setResultList] = useState([]);
    const [defaultResultList, setDefaultResultList] = useState([]);
    const [isLoading, setisLoading] = useState(true);

    const currencyFormatter = new Intl.NumberFormat('en-CA', {
        style: 'currency',
        currency: 'CAD',
    });

    const CADPrice = {
        type: 'number',
        width: 200,
        valueFormatter: ({ value }) => currencyFormatter.format(Number(value)),
    };

    const percentageFormatter = new Intl.NumberFormat('en-US', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
    });

    const PercentageOption = {
        number: 'number',
        width: 200,
        valueFormatter: ({ value }) => (percentageFormatter.format(Number(value)) + '%')
    };

    const columns = [
        { field: 'id', headerName: 'Result ID', width: 150, cellClassName: 'table-style', hide: true },
        { field: 'resultOutputDate', headerName: 'Timestamp', type: 'string', flex: 0.14, cellClassName: 'table-style' },
        { field: 'assetName', headerName: 'Asset', type: 'string', flex: 0.14, cellClassName: 'table-style' },
        { field: 'netSaving', headerName: 'Net Saving', type: 'number', ...CADPrice, flex: 0.14, cellClassName: 'table-positive-numbers' },
        { field: 'returnOnInvestment', headerName: 'Return On Investment', type: 'number', ...PercentageOption, flex: 0.14, cellClassName: 'table-positive-numbers' },
        { field: 'costOfAction', headerName: 'Cost of Action', type: 'number', ...CADPrice, flex: 0.14, cellClassName: 'table-negative-numbers' },
        { field: 'costOfInaction', headerName: 'Cost of Inaction', type: 'number', ...CADPrice, flex: 0.14, cellClassName: 'table-negative-numbers' },
        {
            field: 'configuredRecommendationTitle', headerName: 'Recommendation', type: 'string', flex: 0.14, cellClassName: 'table-style', renderCell: (params) => (
                <a className='configured-recommendation' onClick={() => openScheduleDrilldown(params.getValue('configuredRecommendationId'))}>
                    {params.getValue('configuredRecommendationTitle')}
                </a>)
        }
    ]


    const updateSearch = (input) => {
        setResultList(filterTableItems(TableItemType.Results, defaultResultList, input));
    }

    useEffect(() => {
        const getResultList = async () => {
            let response = await GetRecommendationResultList(props.selectedAsset);
            setDefaultResultList(response);
            setResultList(response);
            setisLoading(false);
        }
        getResultList();
    }, [props.selectedAsset])

    return (
        <div id="main-container">
            <div></div>
            <div>
            <br></br>
            <PageSubHeader
            pageTitle="Results"
            descriptionSubtitle="See the results generated by recommendation jobs"
            showCreateRecommendation={false}
            updateSearch={updateSearch}
            />
            </div>
            <br></br>
            <RecommendationEngineTable
                data={resultList}
                columnValues={columns}
                isClickable={true}
                onClickRow={openResultDrilldown}
                loading = {isLoading}
            />
        </div>
    );
}

export default connect(mapAssetFilterStateToProps, mapDispatchToProps)(ResultsPage);