// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecommendationEngine.Models.DB;

namespace RecommendationEngine.Migrations
{
    [DbContext(typeof(RecommendationEngineDBContext))]
    partial class RecommendationEngineDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBAction", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("DisplayText")
                        .HasColumnType("longtext");

                    b.Property<int?>("RecommendationJobResultId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<int?>("WorkOrderOpenedWorkOrderId")
                        .HasColumnType("int");

                    b.HasKey("ActionId");

                    b.HasIndex("AssetId");

                    b.HasIndex("RecommendationJobResultId");

                    b.HasIndex("WorkOrderOpenedWorkOrderId");

                    b.ToTable("Action");
                });

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBAsset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("AcPower")
                        .HasColumnType("double");

                    b.Property<string>("DisplayText")
                        .HasColumnType("longtext");

                    b.Property<string>("ElementPath")
                        .HasColumnType("longtext");

                    b.Property<string>("EnergyType")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("ParentAssetAssetId")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .HasColumnType("longtext");

                    b.Property<int?>("TypeAssetTypeId")
                        .HasColumnType("int");

                    b.HasKey("AssetId");

                    b.HasIndex("ParentAssetAssetId");

                    b.HasIndex("TypeAssetTypeId");

                    b.ToTable("Asset");
                });

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBAssetRecommendationSchedule", b =>
                {
                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("AssetId", "ScheduleId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("AssetRecommendationSchedule");
                });

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBAssetType", b =>
                {
                    b.Property<int>("AssetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DisplayText")
                        .HasColumnType("longtext");

                    b.Property<string>("EnergyType")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("AssetTypeId");

                    b.ToTable("AssetType");
                });

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBRecommendationJob", b =>
                {
                    b.Property<int>("RecommendationJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JobDuration")
                        .HasColumnType("datetime");

                    b.Property<string>("Result")
                        .HasColumnType("longtext");

                    b.Property<int?>("ScheduleRecommendationScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime");

                    b.Property<string>("TriggeredBy")
                        .HasColumnType("longtext");

                    b.HasKey("RecommendationJobId");

                    b.HasIndex("AssetId");

                    b.HasIndex("ScheduleRecommendationScheduleId");

                    b.ToTable("RecommendationJob");
                });

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBRecommendationJobLog", b =>
                {
                    b.Property<int>("RecommendationJobLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Level")
                        .HasColumnType("longtext");

                    b.Property<int?>("RecommendationJobId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime");

                    b.HasKey("RecommendationJobLogId");

                    b.HasIndex("RecommendationJobId");

                    b.ToTable("RecommendationJobLog");
                });

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBRecommendationJobResult", b =>
                {
                    b.Property<int>("RecommendationJobResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssetId")
                        .HasColumnType("int");

                    b.Property<double>("BenefitOfResult")
                        .HasColumnType("double");

                    b.Property<double>("ConfidencePercentage")
                        .HasColumnType("double");

                    b.Property<double>("Cost")
                        .HasColumnType("double");

                    b.Property<double>("CostOfInaction")
                        .HasColumnType("double");

                    b.Property<string>("DisplayText")
                        .HasColumnType("longtext");

                    b.Property<int?>("JobRecommendationJobId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("longtext");

                    b.HasKey("RecommendationJobResultId");

                    b.HasIndex("AssetId");

                    b.HasIndex("JobRecommendationJobId");

                    b.ToTable("RecommendationJobResult");
                });

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBRecommendationParameter", b =>
                {
                    b.Property<int>("RecommendationParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("DefaultValue")
                        .HasColumnType("double");

                    b.Property<string>("DisplayText")
                        .HasColumnType("longtext");

                    b.Property<int?>("ForRecommendationTypeRecommendationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("RecommendationParameterId");

                    b.HasIndex("ForRecommendationTypeRecommendationTypeId");

                    b.ToTable("RecommendationParameter");
                });

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBRecommendationSchedule", b =>
                {
                    b.Property<int>("RecommendationScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayText")
                        .HasColumnType("longtext");

                    b.Property<string>("Granularity")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("OccurenceDatetime")
                        .HasColumnType("datetime");

                    b.Property<int?>("RecommendationTypeId")
                        .HasColumnType("int");

                    b.HasKey("RecommendationScheduleId");

                    b.HasIndex("RecommendationTypeId");

                    b.ToTable("RecommendationSchedule");
                });

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBRecommendationScheduleParameter", b =>
                {
                    b.Property<int>("RecommendationScheduleParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DisplayText")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<double>("ParamValue")
                        .HasColumnType("double");

                    b.Property<int?>("RecommendationParameterId")
                        .HasColumnType("int");

                    b.Property<int?>("ScheduleRecommendationScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("RecommendationScheduleParameterId");

                    b.HasIndex("RecommendationParameterId");

                    b.HasIndex("ScheduleRecommendationScheduleId");

                    b.ToTable("RecommendationScheduleParameter");
                });

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBRecommendationType", b =>
                {
                    b.Property<int>("RecommendationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DisplayText")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("RecommendationTypeId");

                    b.ToTable("RecommendationType");
                });

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBWorkOrder", b =>
                {
                    b.Property<int>("WorkOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("CostOfWork")
                        .HasColumnType("double");

                    b.Property<string>("DisplayText")
                        .HasColumnType("longtext");

                    b.Property<string>("Protocol")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime");

                    b.HasKey("WorkOrderId");

                    b.ToTable("WorkOrder");
                });

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBAction", b =>
                {
                    b.HasOne("RecommendationEngine.Models.DB.DBAsset", "Asset")
                        .WithMany("ActionsGivenList")
                        .HasForeignKey("AssetId");

                    b.HasOne("RecommendationEngine.Models.DB.DBRecommendationJobResult", "RecommendationJobResult")
                        .WithMany("ActionsSuggestedList")
                        .HasForeignKey("RecommendationJobResultId");

                    b.HasOne("RecommendationEngine.Models.DB.DBWorkOrder", "WorkOrderOpened")
                        .WithMany("Actions")
                        .HasForeignKey("WorkOrderOpenedWorkOrderId");
                });

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBAsset", b =>
                {
                    b.HasOne("RecommendationEngine.Models.DB.DBAsset", "ParentAsset")
                        .WithMany()
                        .HasForeignKey("ParentAssetAssetId");

                    b.HasOne("RecommendationEngine.Models.DB.DBAssetType", "Type")
                        .WithMany("AssetsList")
                        .HasForeignKey("TypeAssetTypeId");
                });

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBAssetRecommendationSchedule", b =>
                {
                    b.HasOne("RecommendationEngine.Models.DB.DBAsset", "Asset")
                        .WithMany("RecommendationSchedulesList")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecommendationEngine.Models.DB.DBRecommendationSchedule", "Schedule")
                        .WithMany("AssetsList")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBRecommendationJob", b =>
                {
                    b.HasOne("RecommendationEngine.Models.DB.DBAsset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("RecommendationEngine.Models.DB.DBRecommendationSchedule", "Schedule")
                        .WithMany("JobsList")
                        .HasForeignKey("ScheduleRecommendationScheduleId");
                });

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBRecommendationJobLog", b =>
                {
                    b.HasOne("RecommendationEngine.Models.DB.DBRecommendationJob", "RecommendationJob")
                        .WithMany("LogsList")
                        .HasForeignKey("RecommendationJobId");
                });

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBRecommendationJobResult", b =>
                {
                    b.HasOne("RecommendationEngine.Models.DB.DBAsset", "Asset")
                        .WithMany("RecommendationJobResultsGivenList")
                        .HasForeignKey("AssetId");

                    b.HasOne("RecommendationEngine.Models.DB.DBRecommendationJob", "Job")
                        .WithMany("ResultsList")
                        .HasForeignKey("JobRecommendationJobId");
                });

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBRecommendationParameter", b =>
                {
                    b.HasOne("RecommendationEngine.Models.DB.DBRecommendationType", "ForRecommendationType")
                        .WithMany("DefaultParametersList")
                        .HasForeignKey("ForRecommendationTypeRecommendationTypeId");
                });

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBRecommendationSchedule", b =>
                {
                    b.HasOne("RecommendationEngine.Models.DB.DBRecommendationType", "RecommendationType")
                        .WithMany("SchedulesOfTypeList")
                        .HasForeignKey("RecommendationTypeId");
                });

            modelBuilder.Entity("RecommendationEngine.Models.DB.DBRecommendationScheduleParameter", b =>
                {
                    b.HasOne("RecommendationEngine.Models.DB.DBRecommendationParameter", "RecommendationParameter")
                        .WithMany("RecommendationScheduleParametersList")
                        .HasForeignKey("RecommendationParameterId");

                    b.HasOne("RecommendationEngine.Models.DB.DBRecommendationSchedule", "Schedule")
                        .WithMany("ParametersList")
                        .HasForeignKey("ScheduleRecommendationScheduleId");
                });
#pragma warning restore 612, 618
        }
    }
}
